def training(verbose=False, plot=False, random_state=None, title='Naive Bayes'):
data = Data()
data.x_to_one_hot()
data.y_to_one_hot()
# keep only some columns
names = ['actdays_0', 'actdays_10', 'actdays_14', 'age_0.27',
'hscore_0', 'illness_0', 'income_0.55']
data.keep_cols(names)
x_train, x_test, y_train, y_test = data.train_test_split(random_state=random_state)
y_train_values = np.argmax(y_train.values, axis=1)
model = MultinomialNB()
model.fit(x_train, y_train_values)
y_pred = model.predict_proba(x_test)
return evaluate(y_train, y_test, y_pred, verbose=verbose, plot=plot, title=title)
def training(verbose=False, plot=False, random_state=None, title='Naive Bayes'):
data = Data()
data.x_to_one_hot()
data.y_to_one_hot()
# keep only some columns
names = ['actdays_0', 'actdays_10', 'actdays_14', 'age_0.27',
'hscore_0', 'illness_0', 'income_0.55']
data.keep_cols(names)
x_train, x_test, y_train, y_test = data.train_test_split(random_state=random_state)
y_train_values = np.argmax(y_train.values, axis=1)
model = MultinomialNB()
model.fit(x_train, y_train_values)
y_pred = model.predict_proba(x_test)
return evaluate(y_train, y_test, y_pred, verbose=verbose, plot=plot, title=title)
