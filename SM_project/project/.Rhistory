scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'illness' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$actdays)
# value counts
df %>% count(actdays)
# plot of age
ggplot(df, aes(x=actdays)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("actdays") +
theme_minimal()
# Create a cross-tabulation
actdays_doctorco_table <- table(df$actdays, df$doctorco)
# Chi-square test of independence
chisq.test(actdays_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ actdays, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = actdays, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'actdays' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$hscore)
# value counts
df %>% count(hscore)
# plot of age
ggplot(df, aes(x=hscore)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("hscore") +
theme_minimal()
# Create a cross-tabulation
hscore_doctorco_table <- table(df$hscore, df$doctorco)
# Chi-square test of independence
chisq.test(hscore_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ hscore, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = hscore, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'hscore' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$chcond1)
# value counts
df %>% count(chcond1)
# plot of chcond1
ggplot(df, aes(x=chcond1)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("chcond1") +
theme_minimal()
# Create a cross-tabulation
chcond1_doctorco_table <- table(df$chcond1, df$doctorco)
# Chi-square test of independence
chisq.test(chcond1_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ chcond1, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = chcond1, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'chcond1' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$chcond2)
# value counts
df %>% count(chcond2)
# plot of chcond2
ggplot(df, aes(x=chcond2)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("chcond2") +
theme_minimal()
# Create a cross-tabulation
chcond2_doctorco_table <- table(df$chcond2, df$doctorco)
# Chi-square test of independence
chisq.test(chcond2_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ chcond2, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = chcond2, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'chcond2' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$nondocco)
# value counts
df %>% count(nondocco)
# plot of nondocco
ggplot(df, aes(x=nondocco)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("nondocco") +
theme_minimal()
# Create a cross-tabulation
nondocco_doctorco_table <- table(df$nondocco, df$doctorco)
# Chi-square test of independence
chisq.test(nondocco_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ nondocco, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = nondocco, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'nondocco' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$hospadmi)
# value counts
df %>% count(hospadmi)
# plot of hospadmi
ggplot(df, aes(x=hospadmi)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("hospadmi") +
theme_minimal()
# Create a cross-tabulation
hospadmi_doctorco_table <- table(df$hospadmi, df$doctorco)
# Chi-square test of independence
chisq.test(hospadmi_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ hospadmi, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = hospadmi, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'hospadmi' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$hospdays)
# value counts
df %>% count(hospdays)
# plot of hospdays
ggplot(df, aes(x=hospdays)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("hospdays") +
theme_minimal()
# Create a cross-tabulation
hospdays_doctorco_table <- table(df$hospdays, df$doctorco)
# Chi-square test of independence
chisq.test(hospdays_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ hospdays, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = hospdays, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'hospdays' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$medicine)
# value counts
df %>% count(medicine)
# plot of medicine
ggplot(df, aes(x=medicine)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("medicine") +
theme_minimal()
# Create a cross-tabulation
medicine_doctorco_table <- table(df$medicine, df$doctorco)
# Chi-square test of independence
chisq.test(medicine_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ medicine, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = medicine, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'medicine' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$prescrib)
# value counts
df %>% count(prescrib)
# plot of prescrib
ggplot(df, aes(x=prescrib)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("prescrib") +
theme_minimal()
# Create a cross-tabulation
prescrib_doctorco_table <- table(df$prescrib, df$doctorco)
# Chi-square test of independence
chisq.test(prescrib_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ prescrib, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = prescrib, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'prescrib' (log scale)") +
geom_bar(position = "dodge", stat = "count")
describe(df$nonpresc)
# value counts
df %>% count(nonpresc)
# plot of nonpresc
ggplot(df, aes(x=nonpresc)) +
geom_histogram(position="dodge", bins=40) +
ggtitle("nonpresc") +
theme_minimal()
# Create a cross-tabulation
nonpresc_doctorco_table <- table(df$nonpresc, df$doctorco)
# Chi-square test of independence
chisq.test(nonpresc_doctorco_table)
# It could also fit a model like a negative binomial if doctor consultations are overdispersed
nb_model <- glm.nb(doctorco ~ nonpresc, data = df)
summary(nb_model)
# For visualization
ggplot(df, aes(x = nonpresc, fill = factor(doctorco))) +
scale_y_continuous(trans = "log10") +
ggtitle("'doctorco' by 'nonpresc' (log scale)") +
geom_bar(position = "dodge", stat = "count")
# Fit a model with main effects only
model1 <- glm.nb(doctorco ~ actdays + illness, data = df)
# Fit a model with the interaction term
model2 <- glm.nb(doctorco ~ actdays * illness, data = df)
# Compare the models
anova_result <- anova(model1, model2, test="Chisq")
# Predictions for a range of 'actdays' and 'illness'
df$pred_doctorco <- predict(model2, type = "response")
# Plotting the interaction between 'actdays' and 'illness'
ggplot(df, aes(x = actdays, y = illness, color = pred_doctorco)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Interaction Effect of 'actdays' and 'illness' on Doctor Consultations",
x = "Activity Days Reduced",
y = "Number of Illnesses",
color = "Predicted Consultations") +
theme_minimal() +
facet_wrap(~ illness)
# Print the ANOVA result
print(anova_result)
# Fit a model with main effects only
model1 <- glm.nb(doctorco ~ age + prescrib, data = df)
# Fit a model with the interaction term
model2 <- glm.nb(doctorco ~ age * prescrib, data = df)
# Compare the models using an ANOVA
anova_result <- anova(model1, model2, test="Chisq")
# Assuming your model2 is already fit and is called 'model2'
# Predictions for a range of 'age' and 'prescrib'
df$pred_doctorco <- predict(model2, type = "response")
# Plotting the interaction between 'age' and 'prescrib'
ggplot(df, aes(x = age, y = prescrib, color = pred_doctorco)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Interaction Effect of 'age' and 'prescrib' on Doctor Consultations",
x = "Age",
y = "Number of Prescribed Medications",
color = "Predicted Consultations") +
theme_minimal() +
facet_wrap(~ prescrib)
# Print the ANOVA result
print(anova_result)
# Fit a model with main effects only
model1 <- glm.nb(doctorco ~ income + freepoor, data = df)
# Fit a model with the interaction term
model2 <- glm.nb(doctorco ~ income * freepoor, data = df)
# Compare the models
anova(model1, model2, test="Chisq")
# Assuming your model is already fit and is called 'model2'
# Predictions for a range of 'income' and 'freepoor'
df$pred_doctorco <- predict(model2, type = "response")
# Plotting the interaction between 'income' and 'freepoor'
ggplot(df, aes(x = income, y = freepoor, color = pred_doctorco)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Interaction Effect of 'income' and 'freepoor' on Doctor Consultations",
x = "Income",
y = "Government Healthcare Coverage",
color = "Predicted Consultations") +
theme_minimal() +
facet_wrap(~ freepoor)
# Fit a model with main effects only
model1 <- glm.nb(doctorco ~ income + levyplus, data = df)
# Fit a model with the interaction term
model2 <- glm.nb(doctorco ~ income * levyplus, data = df)
# Compare the models
anova(model1, model2, test="Chisq")
# Predictions for a range of 'income' and 'levyplus'
df$pred_doctorco <- predict(model2, type = "response")
# Plotting the interaction between 'income' and 'levyplus'
ggplot(df, aes(x = income, y = levyplus, color = pred_doctorco)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Interaction Effect of 'income' and 'levyplus' on Doctor Consultations",
x = "Income",
y = "Private Levy",
color = "Predicted Consultations") +
theme_minimal() +
facet_wrap(~ freepoor)
# Fit a model with main effects only
model1 <- glm.nb(doctorco ~ sex + hscore, data = df)
# Fit a model with the interaction term
model2 <- glm.nb(doctorco ~ sex * hscore, data = df)
# Compare the models
anova(model1, model2, test="Chisq")
# Predictions for a range of 'sex' and 'hscore'
df$pred_doctorco <- predict(model2, type = "response")
# Plotting the interaction between 'sex' and 'hscore'
ggplot(df, aes(x = sex, y = hscore, color = pred_doctorco)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Interaction Effect of 'sex' and 'hscore' on Doctor Consultations",
x = "Sex",
y = "Health Score",
color = "Predicted Consultations") +
theme_minimal() +
facet_wrap(~ sex)
library(mgcv)
library(ROSE)
#load("HealthCareAustralia.rda")
#data = ex3.health
data <- read_csv("HealthCareAustralia.csv")
data$ifvisit = ifelse(data$doctorco == 0, 0, 1)
set.seed(42)
train_indices <- sample(seq_len(nrow(data)), 0.8 * nrow(data))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
barplot(table(data$ifvisit), main = "Original data set", xlab="Ifvisit", ylab="Frequency", col="blue")
model_gam <- gam(ifvisit ~ s(hospdays) + s(actdays) + age*prescrib + freepoor + hscore + nonpresc + illness, data = train_data, family = binomial(link = "logit"))
summary(model_gam)
print(paste("AIC (GAM):", round(AIC(model_gam),2)))
predicted_counts <- round(predict(model_gam, newdata = test_data, type = "response"))
true_counts <- test_data$ifvisit
rmse <- mean(abs(predicted_counts - true_counts))
print(paste("MAE (GAM):", round(rmse,4)))
print(paste("Number of true ifvisit:",sum(true_counts)))
print(paste("Number of ifvisit predicted:", sum(predicted_counts)))
par(mfrow = c(1, 2))
barplot(table(true_counts),ylim = c(0, 1000), main = "True ifvisit", col="green")
abline(h = 100, col = "black", lty = 3)
abline(h = 900, col = "black", lty = 3)
barplot(table(predicted_counts),ylim = c(0, 1000), main = "Predicted ifvisit", col="darkgreen")
abline(h = 100, col = "black", lty = 3)
abline(h = 900, col = "black", lty = 3)
par(mfrow = c(1, 1))
data.rose <- ROSE(ifvisit ~ ., data = data, seed = 1, hmult.majo = 0)$data
data.rose <- abs(data.rose)
data.rose$hospadmi <- round(data.rose$hospadmi)
data.rose$actdays <- round(data.rose$actdays)
data.rose$nondocco <- round(data.rose$nondocco)
data.rose$hospdays <- round(data.rose$hospdays)
data.rose$sex <- round(data.rose$sex)
data.rose$sex <- data.rose$sex - ifelse(data.rose$sex == 2, 1, 0)
data.rose$levyplus <- round(data.rose$levyplus)
data.rose$levyplus <- data.rose$levyplus - ifelse(data.rose$levyplus == 2, 1, 0)
data.rose$freepoor <- round(data.rose$freepoor)
data.rose$freepoor <- data.rose$freepoor - ifelse(data.rose$freepoor == 2, 1, 0)
data.rose$freepera <- round(data.rose$freepera)
data.rose$freepera <- data.rose$freepera - ifelse(data.rose$freepera == 2, 1, 0)
data.rose$illness <- round(data.rose$illness)
data.rose$hscore <- round(data.rose$hscore)
data.rose$chcond1 <- round(data.rose$chcond1)
data.rose$chcond1 <- data.rose$chcond1 - ifelse(data.rose$chcond1 == 2, 1, 0)
data.rose$chcond2 <- round(data.rose$chcond2)
data.rose$chcond2 <- data.rose$chcond2 - ifelse(data.rose$chcond2 == 2, 1, 0)
data.rose$doctorco <- round(data.rose$doctorco)
data.rose$medicine <- round(data.rose$medicine)
data.rose$prescrib <- round(data.rose$prescrib)
data.rose$nonpresc <- round(data.rose$nonpresc)
data.rose$ifvisit <- round(data.rose$ifvisit)
data.rose$ifvisit <- data.rose$ifvisit - ifelse(data.rose$ifvisit == 2, 1, 0)
data.rose$constant <- round(data.rose$constant)
data.rose$constant <- data.rose$constant - ifelse(data.rose$constant == 2, 1, 0)
barplot(table(data.rose$ifvisit), main = "Balanced data set", xlab="Ifvisit", ylab="Frequency", col="pink")
set.seed(42)
train_indices <- sample(seq_len(nrow(data.rose)), 0.8 * nrow(data.rose))
train_data <- data.rose[train_indices, ]
test_data <- data.rose[-train_indices, ]
model_gam <- gam(ifvisit ~ s(age) + s(actdays) + s(hscore) + s(nondocco) + s(medicine), data=train_data, family = binomial(link = "logit"))
summary(model_gam)
par(mfrow=c(2,3))
plot(model_gam, select=1, ylim = c(-100, 100))
plot(model_gam, select=2, ylim = c(-100, 600))
plot(model_gam, select=3, ylim = c(-5, 5))
plot(model_gam, select=4, ylim = c(-10, 10))
plot(model_gam, select=5, ylim = c(-10, 10))
par(mfrow=c(1,1))
predicted_counts <- round(predict(model_gam, newdata = test_data, type = "response"))
true_counts <- test_data$ifvisit
rmse <- mean(abs(predicted_counts - true_counts))
print(paste("AIC (GAM):", round(AIC(model_gam),2)))
print(paste("MAE (GAM):", round(rmse,5)))
print(paste("Number of true ifvisit:",sum(true_counts)))
print(paste("Number of ifvisit predicted:", sum(predicted_counts)))
par(mfrow = c(1, 2))
barplot(table(true_counts),ylim = c(0, 1000), main = "True ifvisit",  col="red")
abline(h = 500, col = "black", lty = 3)
barplot(table(predicted_counts),ylim = c(0, 1000), main = "Predicted ifvisit", col="orange")
abline(h = 500, col = "black", lty = 3)
par(mfrow = c(1, 1))
model_glm <- glm(ifvisit ~  hospadmi + nondocco + illness + actdays + prescrib + nonpresc, data = train_data, family = binomial)
summary(model_glm)
predicted_counts <- round(predict(model_glm, newdata = test_data, type = "response"))
true_counts <- test_data$ifvisit
rmse <- mean(abs(predicted_counts - true_counts))
print(paste("MAE (GLM):", round(rmse,4)))
print(paste("Number of true ifvisit:",sum(true_counts)))
print(paste("Number of ifvisit predicted:", sum(predicted_counts)))
par(mfrow = c(1, 2))
barplot(table(true_counts),ylim = c(0, 1000), main = "True ifvisit", col = "purple")
abline(h = 500, col = "black", lty = 3)
barplot(table(predicted_counts),ylim = c(0, 1000), main = "Predicted ifvisit", col = "magenta")
abline(h = 500, col = "black", lty = 3)
par(mfrow = c(1, 1))
library(MASS)
library(caret)
library(pROC)
library(PRROC)
library(pscl)
data <- read_csv("HealthCareAustralia.csv")
data$ifvisit = ifelse(data$doctorco == 0, 0, 1)
data$sex <- factor(data$sex)
data$levyplus <- as.factor(data$levyplus)
data$freepoor <- as.factor(data$freepoor)
data$freepera <- as.factor(data$freepera)
data$chcond1 <- as.factor(data$chcond1)
data$chcond2 <- as.factor(data$chcond2)
#age_factor
thresholds <- c(min(data$age), 0.32, 0.62, max(data$age))
data$age_factor <- cut(data$age, breaks = thresholds,
labels = c("young", "adult", "old"), include.lowest = TRUE)
#income_factor
thresholds <- c(min(data$income), 0.15, 0.45, max(data$income))
data$income_factor <- cut(data$income, breaks = thresholds,
labels = c("Low", "Middle", "High"), include.lowest = TRUE)
set.seed(42)
train_indices <- sample(seq_len(nrow(data)), 0.8 * nrow(data))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
ZINB_model <- zeroinfl(doctorco ~illness * actdays + hscore + chcond1 + age: chcond2
+ hospadmi  + prescrib + nonpresc|levyplus + age:income:freepoor + freepera
+ illness * actdays + prescrib, data = train_data, dist = "negbin")
AIC(ZINB_model)
summary(ZINB_model)
predicted_counts_zinb <- round(predict(ZINB_model, newdata = test_data, type = "response"))
predicted_category_zinb <- ifelse(predicted_counts_zinb < 1, 0,predicted_counts_zinb)
true_counts <- test_data$doctorco
mae_zinb <- mean(abs(predicted_counts_zinb - true_counts))
cat("MAE:", mae_zinb, "\n")
rmse_zinb <- sqrt(mean((predicted_counts_zinb - true_counts)^2))
cat("RMSE:", rmse_zinb, "\n")
actual_binary <- ifelse(true_counts > 0, 1, 0)
predicted_binary_zinb <- ifelse(predicted_counts_zinb > 0, 1, 0)
conf_matrix_zinb <- table(Actual = actual_binary, Predicted = predicted_binary_zinb)
confusionMatrix(as.factor(predicted_binary_zinb), as.factor(actual_binary))
# Balanced accuracy
balanced_accuracy_zinb <- (sensitivity(conf_matrix_zinb, positive = "1") + specificity(conf_matrix_zinb, positive = "1")) / 2
cat("Balanced Accuracy:", balanced_accuracy_zinb, "\n")
# AUC-ROC
roc_result_zinb <- roc(actual_binary, as.numeric(predicted_binary_zinb) - 1)
auc_roc_zinb <- auc(roc_result_zinb)
cat("AUC-ROC:", auc_roc_zinb, "\n")
actual_freq <- table(true_counts)
predicted_freq_zinb <- table(predicted_counts_zinb)
par(mfrow=c(1,2))
# Bar plot for Actual Counts
barplot(actual_freq, main="Actual Visits", xlab="Doctor Visits Count",
ylab="Frequency", col="lightblue")
# Bar plot for Predicted Counts
barplot(predicted_freq_zinb, main="Predicted Visits", xlab="Predicted Visits Count",
ylab="Frequency", col="darkblue")
par(mfrow=c(1,1))
for (i in 0:9) {
actual_ <- true_counts == i
predicted_ <- predicted_counts_zinb == i
actual_count <- sum(actual_)
predicted_count<- sum(predicted_)
cat("Actual count for", i, "Visits:", actual_count, "\n")
cat("Predicted count for", i, "Visits:", predicted_count, "\n\n")
}
hurdle_model <- hurdle(doctorco ~ illness + actdays + hospadmi|income:freepoor +
actdays *illness + sex*hscore + hospadmi + prescrib + nonpresc,
data = train_data, dist ="negbin")
AIC(hurdle_model)
#summary(hurdle_model)
#hurdle with factors
hurdle_model2 <- hurdle(doctorco ~ income_factor+illness +  actdays+ hospadmi|
income:freepoor + actdays *illness + sex*hscore + hospadmi +
age_factor*prescrib + nonpresc,
data = train_data, dist = "negbin")
AIC(hurdle_model2)
predicted_counts_hurdle <- round(predict(hurdle_model2, newdata=test_data, type = "response"))
predicted_category_hnb <- ifelse(predicted_counts_hurdle< 1, 0, predicted_counts_hurdle)
true_counts <- test_data$doctorco
mae_hurdle <- mean(abs(predicted_counts_hurdle- true_counts))
cat("MAE:", mae_hurdle, "\n")
rmse_hurdle <- sqrt(mean((predicted_counts_hurdle - true_counts)^2))
cat("RMSE:", rmse_hurdle, "\n")
actual_binary <- ifelse(true_counts > 0, 1, 0)
predicted_binary <- ifelse(predicted_counts_hurdle > 0, 1, 0)
conf_matrix <- table(Actual = actual_binary, Predicted = predicted_binary)
confusionMatrix(as.factor(predicted_binary), as.factor(actual_binary))
# Balanced accuracy
balanced_accuracy <- (sensitivity(conf_matrix, positive = "1") +
specificity(conf_matrix, positive = "1")) / 2
cat("Balanced Accuracy:", balanced_accuracy, "\n")
# AUC-ROC
roc_result <- roc(actual_binary, as.numeric(predicted_binary) - 1)
auc_roc <- auc(roc_result)
cat("AUC-ROC:", auc_roc, "\n")
actual_freq <- table(true_counts)
predicted_freq <- table(predicted_counts_hurdle)
par(mfrow=c(1,2))
# Bar plot for Actual Counts
barplot(actual_freq, main="Actual Visits", xlab="Doctor Visits Count",
ylab="Frequency", col="lightblue")
# Bar plot for Predicted Counts
barplot(predicted_freq, main="Predicted Visits", xlab="Predicted Visits Count",
ylab="Frequency", col="darkblue")
par(mfrow=c(1,1))
for (i in 0:9) {
actual_ <- true_counts == i
predicted_ <- predicted_counts_hurdle == i
actual_count <- sum(actual_)
predicted_count <- sum(predicted_)
cat("Actual count for", i, "Visits:", actual_count, "\n")
cat("Predicted count for", i, "Visits:", predicted_count, "\n\n")
}
library(reticulate)
reticulate::repl_python()
